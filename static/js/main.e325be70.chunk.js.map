{"version":3,"sources":["components/CalcButton.tsx","Calc.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalcButton","value","children","color","onClick","Button","variant","style","height","width","Calc","useState","text","setText","firstValue","setFirstValue","operation","setOperation","addNumber","operatorPressed","result","v1","v2","resetFisrtValue","resetOperation","Box","border","borderColor","boxShadow","Grid","container","direction","spacing","justify","alignItems","item","xs","TextField","id","label","type","inputProps","min","textAlign","onChange","e","target","substr","length","charAt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.e325be70.chunk.js","sourcesContent":["import React from 'react'\nimport { Button } from '@material-ui/core'\n\ninterface Props {\n    value?: string\n    color?: string\n    children?: React.ReactNode\n    onClick?: () => void\n}\n\nconst CalcButton: React.FC<Props> = ({ value, color, children, onClick }) => {\n    return (\n        <Button variant=\"contained\" style={{ height: '100%', width: '100%' }} value={value} onClick={onClick}>\n            {children}\n        </Button>\n    )\n}\n\nexport default CalcButton\n","import React, { useState } from 'react'\nimport { Grid, Box, TextField } from '@material-ui/core'\n\nimport CalcButton from './components/CalcButton'\n\nexport const Calc: React.FC = () => {\n    const [text, setText] = useState('')\n    const [firstValue, setFirstValue] = useState('')\n    const [operation, setOperation] = useState('')\n\n    const removeLastNumberPressed = () => {\n        setText(text.substr(0, text.length - 1))\n    }\n\n    const toggleSimbolPressed = () => {\n        if (text.charAt(0) === '-') {\n            setText(text.substr(1))\n        } else {\n            setText('-' + text)\n        }\n    }\n\n    const addNumber = (value: string) => {\n        setText(text + value)\n    }\n\n    const operatorPressed = (value: string) => {\n        setFirstValue(text)\n        setOperation(value)\n        setText('')\n    }\n\n    const resultPressed = () => {\n        result()\n        resetFisrtValue()\n        resetOperation()\n    }\n\n    const result = () => {\n        let result = 0\n        const v1: number = +firstValue\n        const v2: number = +text\n\n        switch (operation) {\n        case '+':\n            result = v1 + v2\n            break\n        case '-':\n            result = v1 - v2\n            break\n        case '*':\n            result = v1 * v2\n            break\n        case '/':\n            result = v1 / v2\n            break\n        case '%':\n            result = +text / 100\n            break\n        case '1/x':\n            result = 1 / +text\n            break\n        default:\n            result = 0\n        }\n\n        setText('' + result)\n    }\n\n    const reset = () => {\n        setText('')\n        resetOperation()\n        resetFisrtValue()\n    }\n\n    const resetFisrtValue = () => {\n        setFirstValue('')\n    }\n\n    const resetOperation = () => {\n        setOperation('')\n    }\n\n    return (\n        <Box border={1} borderColor=\"grey.500\" boxShadow={3}>\n            <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"stretch\">\n                <Grid item xs={12}>\n                    <TextField\n                        id=\"text\"\n                        label=\"\"\n                        type=\"text\"\n                        variant=\"outlined\"\n                        inputProps={{ min: 0, style: { textAlign: 'right' } }}\n                        style={{ height: '100%', width: '100%' }}\n                        value={text}\n                        onChange={e => {\n                            setText(e.target.value)\n                        }}\n                    />\n                </Grid>\n\n                <Grid item xs={2}>\n                    <CalcButton\n                        value=\"MC\"\n                        onClick={() => {\n                            reset()\n                        }}>\n                        MC\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton>MR</CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton>MS-</CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton>M+</CalcButton>\n                </Grid>\n                <Grid item xs={4}>\n                    <CalcButton>M-</CalcButton>\n                </Grid>\n\n                <Grid item xs={2}>\n                    <CalcButton\n                        value=\"backspace\"\n                        onClick={() => {\n                            removeLastNumberPressed()\n                        }}>\n                        &#60;&#10134;\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton>CE</CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton>C</CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        value=\"+-\"\n                        onClick={() => {\n                            toggleSimbolPressed()\n                        }}>\n                        &#177;\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={4}>\n                    <CalcButton value=\"Square\">&#8730;</CalcButton>\n                </Grid>\n\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            addNumber('7')\n                        }}>\n                        7\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            addNumber('8')\n                        }}>\n                        8\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            addNumber('9')\n                        }}>\n                        9\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            operatorPressed('/')\n                        }}>\n                        /\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={4}>\n                    <CalcButton\n                        value=\"%\"\n                        onClick={() => {\n                            operatorPressed('%')\n                        }}>\n                        &#37;\n                    </CalcButton>\n                </Grid>\n\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            addNumber('4')\n                        }}>\n                        4\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            addNumber('5')\n                        }}>\n                        5\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            addNumber('6')\n                        }}>\n                        6\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={2}>\n                    <CalcButton\n                        onClick={() => {\n                            operatorPressed('*')\n                        }}>\n                        *\n                    </CalcButton>\n                </Grid>\n                <Grid item xs={4}>\n                    <CalcButton\n                        value=\"1/x\"\n                        onClick={() => {\n                            operatorPressed('1/x')\n                        }}>\n                        ¹/×\n                    </CalcButton>\n                </Grid>\n\n                <Grid item xs={8}>\n                    <Grid container xs={12} spacing={3} justify=\"center\" alignItems=\"stretch\">\n                        <Grid item xs={3}>\n                            <CalcButton\n                                onClick={() => {\n                                    addNumber('1')\n                                }}>\n                                1\n                            </CalcButton>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <CalcButton\n                                onClick={() => {\n                                    addNumber('2')\n                                }}>\n                                2\n                            </CalcButton>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <CalcButton\n                                onClick={() => {\n                                    addNumber('3')\n                                }}>\n                                3\n                            </CalcButton>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <CalcButton\n                                onClick={() => {\n                                    operatorPressed('-')\n                                }}>\n                                -\n                            </CalcButton>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container xs={12} spacing={3} justify=\"center\" alignItems=\"stretch\">\n                        <Grid item xs={6}>\n                            <CalcButton\n                                onClick={() => {\n                                    addNumber('0')\n                                }}>\n                                0\n                            </CalcButton>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <CalcButton\n                                onClick={() => {\n                                    addNumber('.')\n                                }}>\n                                .\n                            </CalcButton>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <CalcButton\n                                onClick={() => {\n                                    operatorPressed('+')\n                                }}>\n                                +\n                            </CalcButton>\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={4}>\n                    <Grid style={{ height: '100%' }}>\n                        <CalcButton\n                            value=\"=\"\n                            onClick={() => {\n                                resultPressed()\n                            }}>\n                            &#61;\n                        </CalcButton>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n","import React from 'react'\nimport { Calc } from './Calc'\n\nfunction App() {\n    return (\n        <div>\n            <Calc />\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}